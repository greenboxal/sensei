require 'docile'
require 'fileutils'
require 'sensei/project'
require 'sensei/rule'

module Sensei
  class Module
    attr_reader :parent, :path

    class << self
      def get_dsl_binding
        binding
      end
    end

    def initialize(parent, path)
      @parent = parent
      @path = path
      @modules = Array.new
      @rules = Hash.new
      @projects = Array.new

      kataload (@path + "Katafile.rb").to_s
    end

    def import(path)
      @modules << Module.new(self, @path + path)
    end

    def kataload(path)
      instance_eval File.read(path), path
    end

    def project(name, &block)
      @projects << Docile.dsl_eval(Project.new(self, name), &block)
    end

    def rule(rules)
      rules.each do |k, v|
        @rules[k] = v
      end
    end

    def file(file, type = :module)
      SenseiFile.new(self, type, file)
    end

    def files(*files)
      f = Array.new

      files.each do |fname|
        f << file(fname, :module)
      end

      f
    end

    def files2(type, *files)
      f = Array.new

      files.each do |fname|
        f << file(fname, type)
      end

      f
    end

    def root(file)
      SenseiFile.new(nil, :root, file)
    end

    def build(file)
      SenseiFile.new(nil, :build, file)
    end

    def _find_rule(name)
      return @rules[name] if @rules.has_key? name
      return @parent._find_rule name if @parent
      throw "Rule not found #{name}"
    end

    def _write_ninja
      path = File.join(Sensei.driver.options.output_directory, @path)

      FileUtils.mkpath path
      File.open File.join(path, 'build.ninja'), 'w' do |w|
        w << "# Generated by sensei\n"
        w << "\n"

        @rules.each do |k, v|
          v.write_ninja k, w
          w << "\n"
        end

        @projects.each do |v|
          v._write_ninja w
        end

        @modules.each do |v|
          w << "subninja #{v.path}/build.ninja\n"
        end
      end

      @modules.each do |v|
        v._write_ninja
      end
    end
  end
end
